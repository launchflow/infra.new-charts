name: Helm Chart Release Pipeline

on:
  workflow_dispatch:
    inputs:
      chart_version:
        description: 'Chart version to release (e.g., 0.1.0)'
        required: true
        default: '0.0.1'
      app_version:
        description: 'App version (e.g., 0.1.0)'
        required: true
        default: '0.0.1'
      registry:
        description: 'Container registry'
        required: true
        default: 'ghcr.io'
        type: choice
        options:
          - ghcr.io
          - docker.io
      dry_run:
        description: 'Perform a dry run (validate only, do not publish)'
        required: false
        default: false
        type: boolean

env:
  CHART_NAME: infra-new
  CHART_PATH: infra-new-chart
  REGISTRY_USERNAME: ${{ github.actor }}

jobs:
  validate:
    name: Validate Chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Lint Helm chart
        run: |
          helm lint ${{ env.CHART_PATH }}

      - name: Validate chart templates
        run: |
          helm template test ${{ env.CHART_PATH }} --debug --dry-run

      - name: Check chart dependencies
        run: |
          cd ${{ env.CHART_PATH }}
          if [ -f Chart.lock ]; then
            helm dependency build
          fi

  test:
    name: Test Chart
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Create kind cluster
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: chart-testing

      - name: Install chart
        run: |
          helm install test-release ${{ env.CHART_PATH }} --wait --timeout=300s

      - name: Test chart installation
        run: |
          kubectl get all -l app.kubernetes.io/instance=test-release
          helm test test-release

      - name: Uninstall chart
        run: |
          helm uninstall test-release

  version-update:
    name: Update Chart Version
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: ${{ !inputs.dry_run }}
    outputs:
      chart_version: ${{ steps.update-version.outputs.chart_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Chart.yaml versions
        id: update-version
        run: |
          cd ${{ env.CHART_PATH }}
          
          # Update chart version
          sed -i "s/^version:.*/version: ${{ inputs.chart_version }}/" Chart.yaml
          
          # Update app version
          sed -i "s/^appVersion:.*/appVersion: \"${{ inputs.app_version }}\"/" Chart.yaml
          
          echo "chart_version=${{ inputs.chart_version }}" >> $GITHUB_OUTPUT
          
          # Show changes
          echo "Updated Chart.yaml:"
          cat Chart.yaml

      - name: Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ${{ env.CHART_PATH }}/Chart.yaml
          git commit -m "chore: bump chart version to ${{ inputs.chart_version }}" || exit 0
          git push

  package:
    name: Package Chart
    runs-on: ubuntu-latest
    needs: version-update
    if: ${{ !inputs.dry_run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main  # Get the latest commit with version updates

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Package Helm chart
        run: |
          helm package ${{ env.CHART_PATH }} --destination ./packages

      - name: Upload chart package
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart-package
          path: ./packages/*.tgz

  release:
    name: Release Chart
    runs-on: ubuntu-latest
    needs: [package, version-update]
    if: ${{ !inputs.dry_run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Download chart package
        uses: actions/download-artifact@v4
        with:
          name: helm-chart-package
          path: ./packages

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push chart to OCI registry
        uses: appany/helm-oci-chart-releaser@v0.5.0
        with:
          name: ${{ env.CHART_NAME }}
          repository: ${{ github.repository_owner }}
          tag: ${{ inputs.chart_version }}
          path: ${{ env.CHART_PATH }}
          registry: ${{ inputs.registry }}
          registry_username: ${{ env.REGISTRY_USERNAME }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          update_dependencies: 'true'

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ inputs.chart_version }}
          name: Release v${{ inputs.chart_version }}
          body: |
            ## Helm Chart Release v${{ inputs.chart_version }}
            
            ### Installation
            ```bash
            helm pull ${{ inputs.registry }}/${{ github.repository_owner }}/${{ env.CHART_NAME }}:${{ inputs.chart_version }}
            helm install my-release ${{ inputs.registry }}/${{ github.repository_owner }}/${{ env.CHART_NAME }}:${{ inputs.chart_version }}
            ```
            
            ### Changes
            - Chart version: ${{ inputs.chart_version }}
            - App version: ${{ inputs.app_version }}
          files: ./packages/*.tgz
          draft: false
          prerelease: false

  dry-run-summary:
    name: Dry Run Summary
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: ${{ inputs.dry_run }}
    steps:
      - name: Summary
        run: |
          echo "## Dry Run Completed Successfully! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Chart linting passed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Template validation passed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Chart testing passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Would Release" >> $GITHUB_STEP_SUMMARY
          echo "- **Chart Version:** ${{ inputs.chart_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **App Version:** ${{ inputs.app_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry:** ${{ inputs.registry }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To perform the actual release, run this workflow again with 'Dry Run' unchecked."